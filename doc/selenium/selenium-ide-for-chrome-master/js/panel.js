// Generated by CoffeeScript 1.6.2
(function() {
  "use strict";
  var DOMContentLoaded, LocationHref, global,
    _this = this;

  global = this;

  global.scopes = {};

  global.selenium = void 0;

  Deferred.onerror = function(error) {
    if ((error != null ? error.type : void 0) === 'error.call') {
      return void 0;
    }
    return console.debug(arguments);
  };

  DOMContentLoaded = function(param) {
    var elem, mod, name, _i, _len, _ref;

    mod = angular.module('ng');
    _ref = document.querySelectorAll('[ng-controller]');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      elem = _ref[_i];
      name = elem.getAttribute('ng-controller');
      mod.controller(name, ['$scope', global[name]]);
      global.scopes[name] = angular.element(elem).scope();
    }
    global.scopes['menuPanelCtrl'].baseURL = param.LocationHref;
    global.scopes['menuPanelCtrl'].$apply();
    chrome.extension.onMessage.addListener(function(msg) {
      if (!global.scopes['menuPanelCtrl'].operationRecording) {
        return;
      }
      if (msg.command !== 'event') {
        return;
      }
      delete msg.command;
      return global.scopes['testCommandCtrl'].add(msg);
    });
    global.addEventListener('click', function(event) {
      var key, val, _ref1, _results;

      _ref1 = global.scopes;
      _results = [];
      for (key in _ref1) {
        val = _ref1[key];
        _results.push(val.$emit(event.type, event));
      }
      return _results;
    }, true);
    return global.addEventListener('keyup', function(event) {
      var key, val, _ref1, _results;

      _ref1 = global.scopes;
      _results = [];
      for (key in _ref1) {
        val = _ref1[key];
        _results.push(val.$emit(event.type, event));
      }
      return _results;
    });
  };

  LocationHref = function(defer) {
    return chrome.tabs.query({
      'active': true,
      'windowType': 'normal'
    }, function(tabs) {
      if (tabs[0].url.match(/^chrome:/)) {
        alert('Security Error.\ndoes not run on "chrome://" page.');
        global.close();
        return void 0;
      }
      defer(tabs[0].url);
      return void 0;
    });
  };

  (function() {
    global.selenium = new SeleniumIDE();
    global.selenium.init();
    return Deferred.parallel({
      'load': (function() {
        var defer;

        defer = Deferred();
        document.addEventListener('DOMContentLoaded', function() {
          return defer.call();
        });
        return defer;
      })(),
      'LocationHref': Deferred.connect(LocationHref)()
    }).next(DOMContentLoaded);
  })();

}).call(this);
