// Generated by CoffeeScript 1.6.2
(function() {
  "use strict";  describe('SeleniumIDE', function() {
    beforeEach(mocha.sinon.testBefore(function() {
      var reg, respond, spies;

      this.sel = new SeleniumIDE;
      this.sel.init({
        'server': ''
      });
      spies = this.spies = {};
      reg = function(url) {
        return RegExp("^" + url + "$");
      };
      respond = function(result) {
        return function(xhr, url) {
          spies[url] || (spies[url] = sinon.spy());
          spies[url].apply(this, arguments);
          return xhr.respond(200, {}, result);
        };
      };
      this.sandbox.server.autoRespond = true;
      this.sandbox.server.autoRespondAfter = 0;
      this.sandbox.server.respondWith(reg('/(session)'), respond(JSON.stringify({
        'sessionId': 'sid'
      })));
      this.sandbox.server.respondWith(reg('/(session)/sid'), respond('{}'));
      this.sandbox.server.respondWith(reg('/session/sid/(window|url)'), respond('{}'));
      this.sandbox.server.respondWith(reg('/session/sid/(element)'), respond(JSON.stringify({
        'value': {
          'ELEMENT': 'eid'
        }
      })));
      return this.sandbox.server.respondWith(reg('/session/sid/element/eid/(click|value)'), respond('{}'));
    }));
    afterEach(mocha.sinon.testAfter(function() {}));
    it('setURL', function() {
      this.sandbox.spy(this.sel, 'setURL');
      this.sel.send({
        'baseURL': 'http://example.com',
        'tests': []
      });
      this.sandbox.clock.tick(100);
      expect(this.sel.sessionId).to.be.eq('sid');
      expect(this.spies['url'].callCount).to.be.eq(1);
      return expect(this.spies['url'].args[0][0].requestBody).to.be.eq('{"url":"http://example.com"}');
    });
    it('send', function() {
      this.sel.send({
        'baseURL': 'http://example.com',
        'tests': [
          {
            'name': 'click',
            'selector': 'hoge'
          }, {
            'name': 'text',
            'selector': 'hoge',
            'value': 'value'
          }
        ]
      });
      this.sandbox.clock.tick(100);
      expect(this.spies['click'].callCount).to.be.eq(1);
      return expect(this.spies['value'].callCount).to.be.eq(1);
    });
    return it('quit', function() {
      this.sel.send({});
      this.sandbox.clock.tick(100);
      this.spies['session'].reset();
      this.sel.quit();
      this.sandbox.clock.tick(100);
      return expect(this.spies['session'].callCount).to.be.eq(1);
    });
  });

}).call(this);
