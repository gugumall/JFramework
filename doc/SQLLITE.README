---------------------------------------------------------------------
What:  SQLite 3.3.x JDBC Driver
Who:   David Crawshaw <david@zentus.com>
When:  2006
Why:   Because Derby is bloated, HSQLDB has too many capital letters
       in its name and I don't have the time to maintain a full Java
       port of SQLite.
How:   BSD License (dig in)
---------------------------------------------------------------------


-- USING ------------------------------------------------------------
Download the binary for the platform you are developing on. Open the
tarball and copy the two files into your application directory:
    sqlitejdbc.jar
    [lib]sqlitejdbc.[dll, so, jnilib]

Reference the driver in your code:
    Class.forName("org.sqlite.JDBC");
    Connection conn = DriverManager.getConnection(
        "jdbc:sqlite:filename");
    // ... use the database ...
    conn.close();

And call your program with the driver's JAR file in the classpath
and the C library in the librarypath. E.g.
    java -cp lib/sqlitejdbc.jar \
        -Djava.library.path=lib \
        yourprog.Main

Alternatively, if you wish to load the native library at runtime,
set the system property "org.sqlite.lib.path" to the directory
containing the library. For bundling several binaries, the property
"org.sqlite.lib.name" can be used if the path property is set. This
is used as the name of the native library to load.

For a memory database, use a URL without a file name:
    Connection conn = DriverManager.getConnection("jdbc:sqlite:");


-- NOT YET IMPLEMENTED ----------------------------------------------
Most aspects of JDBC that are unsupported are done so because SQLite
doesn't lend itself that way, or I haven't got around to it yet.

- user-defined functions: JDBC has no support for adding these,
  though an external interface is planned.
- getBlob() / setBlob(): these functions require constantly creating
  instances of java.sql.Blob, which I do not like. The features of
  these functions, such as Stream access cannot be implemented
  efficiently on SQLite anyhow. The only thing that is important is
  retrieving the length of a blob without reading the contents into
  memory. I hope to provide non-JDBC access to this through the API
  mentioned for user-defined functions.
- getDate() / setDate(): coming soon, just trying to find the time.
- getObject() / setObject(): nasty functions that would make the
  JDBC driver make some choices about types, which at the moment it
  does not do. Partial implementations may come later.
- ResultSet.isLast(): the only truly evil function in the JDBC spec.
  Even the JavaDoc's accept this:
     Calling the method isLast may be expensive because the JDBC
     driver might need to fetch ahead one row in order to determine
     whether the current row is the last row in the result set.

  Supporting this function would bring all the pain of determining
  types, terribly bloat the code and mean a performance hit. It
  will probably always throw an SQLException. Use next() instead.


-- COMPILING --------------------------------------------------------
Install gcc, gnu make, set your $JAVA_HOME and type:
    $ make

On a Unix system, this should compile the driver for your
architecture and run the test suite. On cygwin you may be lucky and
only have to rename libsqlitejdbc.so to sqlitejdbc.dll, or other
problems may appear.


-- COMPILING WITH MSVC ----------------------------------------------
(Thanks to Brannon King.) Grab from this project:
    src/org/sqlite/DB.c
    build/DB.h
You can otherwise generate DB.h with javah (see the Makefile).

Compile the sqlite3.dll from http://www.sqlite.org with:
    #define SQLITE_ENABLE_COLUMN_METADATA
and reference the .dll and sqlite3.h in the project containing DB.c
and DB.h. This will produce the JNI dll.

Then compile the .java sources the normal way with javac and put them
in a jar file. Include the jar file, the JNI dll and sqlite3.dll in
your Java project.

It is unknown whether this produces a faster driver.


-- CROSS COMPILING --------------------------------------------------
Ask yourself, do I really have to do this? Cross-compiling sucks.
C ain't Java. Continue at risk to your innocence.

Start by making the compile above work.

This compile process does not use the auto-goop family. Instead, it
is all done out of a single Makefile. Read it, you will become
familiar with its behaviour. It downloads the stripped-source
version of SQLite and compile it for the specified OS and
architecture (the make variables 'os' and 'arch' respectively). Then
the JNI-bridge file src/org/sqlite/DB.c is compiled. The resultant
DB.o and *.o files for SQLite are linked into the OS-specific JNI
library.

I develop on an Intal Mac and compile everything on Linux. Your best
bet is a Linux machine, though it should be possible under Mac OS or
Cygwin.

Before compiling, install your JNI headers in src/jni/$(os)/. I
don't distribute these with the project as I worry about copyright
issues. Two files are needed, 'jni.h' and 'jni_md.h'.

On Windows:
    C:\Program Files\Java\*jdk version*\include\, and include\win32
On Mac:
    /System/Library/Frameworks/JavaVM.framework/Headers
On Linux:
    $(JAVA_HOME)/include

Now you can run:
    make arch=[i386/powerpc] os=[Win/Darwin/Linux]

When it works, it will build the library and run a series of
JDBC-based tests to make sure the driver isn't broken. If you want
to modifiy it, these tests will soon become your best friend. If you
fix a bug, consider making a test for it.

Often a compile on a new machine will fail just because the Maekfile
gives the wrong name for gcc. E.g. it looks for
$(arch)-apple-darwin-gcc when your installation uses
$(arch)-apple-darwin8-gcc.

To compile for everyone at once and make nice tarballs use:
    make all

